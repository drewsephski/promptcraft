import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || '';
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || '';

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

export type Tutorial = {
  id: string;
  title: string;
  description: string;
  content: string;
  category: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  github_url?: string;
  author_id: string;
  author_name: string;
  created_at: string;
  updated_at: string;
  is_approved: boolean;
  tags: string[];
};

export type Profile = {
  id: string;
  email: string;
  name: string;
  avatar_url?: string;
  created_at: string;
};
/**
 * MODEL & PROMPT MANAGEMENT TYPES
 * ------------------------------------------------------------------
 * A flexible schema that supports:
 *  • Multiple model providers (OpenAI, Gemini, Anthropic, local LLMs)
 *  • Versioning so users can iterate on prompts
 *  • Role-based / chain-of-thought / few-shot templates via 
 *  • Optional private visibility for premium tiers
 * ------------------------------------------------------------------
 */

export type ModelProvider = openai | gemini | anthropic | local;

/**
 * Common identifiers we expect to support out of the box.
 * Users can technically store any string so we keep this list
 * extensible by falling back to .
 */
export type ModelIdentifier =
  | gpt-4o
  | gpt-4
  | gpt-3.5-turbo
  | gemini-pro-2.5
  | gemini-flash-2.5
  | claude-3
  | ollama
  | (string & {}); // allow arbitrary custom model names

export interface PromptParameters {
  temperature?: number;
  max_tokens?: number;
  top_p?: number;
  presence_penalty?: number;
  frequency_penalty?: number;
  stop?: string[];
  [key: string]: any; // future-proof for provider-specific params
}

export type PromptVisibility = public | private;

export type PromptStructureType =
  | free-form
  | role-based
  | chain-of-thought
  | few-shot;

export type Prompt = {
  id: string;
  title: string;
  description: string;
  /** The main prompt text or JSON for multi-role prompts */
  content: string;
  category?: string;
  tags: string[];

  /** Ownership & audit */
  author_id: string;
  author_name: string;
  created_at: string;
  updated_at: string;

  /** Model information */
  provider: ModelProvider;
  model: ModelIdentifier;
  parameters: PromptParameters;

  /** Versioning & visibility */
  version: number;
  visibility: PromptVisibility;

  /** Optional helper to suggest which template style it follows */
  structure_type?: PromptStructureType;
};
